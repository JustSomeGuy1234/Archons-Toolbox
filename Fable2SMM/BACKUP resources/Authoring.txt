This guide will assume you have some experience with Lua, coroutines, function environments, metatables, etc. although an understanding of the last two aren't required.

A Quick Manager Summary/Intro:
	The Script Mod Manager provides a very easy way of getting your own Lua code running in the game, and in a format that's ideal for redistributing.
	Mods are comprised of a single folder which contains a minimum of just two small files (see Mod Layout for more). 
	To get the mod into a format ready for sharing just zip up the mod's folder.

	I won't go into detail here but the manager has two components: The manager and the runner.
	The manager is the GUI application that patches the game and handles mod files.
	The runner is the internal game component that sets up, manages, and runs mods' Lua code.
	I'll probably say manager when I mean runner but I don't think I really need to differentiate anyway.

A Quick Mods Intro:
	Your mods will have access to the entire ingame Lua state so you can do whatever you want.
	Your mod's code will be run in a new function environment, so variables will be defined in your mods own table just like a module.
	Your mod's environment will have its metatable set to the ModMetatable which will give it access to certain things like ModHooks and patching.

	If your mod is not static (see Manifest Property: Static) you can define a function called Update() that will automatically be turned into a coroutine and resumed each tick.
	If you need more than one coroutine, just make more and resume them from your main Update function.

	You can define these functions that will be automatically called when your mod is being managed:
	Enable, Disable, Uninstall.
	The first two are called when your mod is enabled/disabled, and Uninstall is called after being uninstalled.

	When Uninstall is called, you must do everything you can to restore the game to how it was before the mod was installed.
	This means deleting any spawned NPCs, taking the hero out of Interaction Mode/Removing cutscene rules, restoring overwritten functions/values if possible, etc.
	Your Update coroutine will not be resumed anymore after being uninstalled.

	On a more positive note you can return data with your Uninstall function.
	If your mod is being uninstalled the return value will be saved in a table containing uninstall data (with the key being the mods NameID), unless the player has chosen ClearData from the manager.
	If your mod is being updated, the return value is passed to the new instance.
		Imagine we have a mod that stores a new XP type and the mod is being updated. 
		In Uninstall() we could return the amount of XP the player has earned, or a table containing many different values.
		If your script is more elaborate and the position of a coroutine must be saved I recommend looking at how the game does stages in quests. 
			The main loop encapsulates the entire function but only the code within the current Stage is run.
			This would let you restart the coroutine from the same point based on the public Stage variable.

ModMetatable:
	Todo


Mod Folder Layout
	A mod is a folder containing at least two files. The first file is the modmanifest.json file, and the others are Lua scripts.
	These files must be in a folder in the /Mods/ folder, with the folder name being identical to the NameID of the mod.
	Read their Manifest Property sections for more.

	modmanifest.json
		The mod manifest contains information used by the manager to install the mod to the installedmods.lua file (read the technical section below for more).
		Most importantly it contains the mods ID, starting script path, and version.

		Manifest Property: NameID
			This is the main internal identifier for your mod. It is vital that this is consistent with your Mods folder name.
			If you change the NameID after the mod has already been installed, it will be seen as completely seperate mod in both the manager AND ingame.
			I HIGHLY recommend that you just choose something unique and recognizable, as changing the NameID is a big hastle and a risk to your users' installs if your mod has already been released.

		Manifest Property: StartScriptPath
			The path to the Lua script that is called by the manager to initiate your script. It has its own environment, so you can define variables however you want.
			It has access to a few things provided by the manager for extra functionality, like ModHooks.

		Manifest Property: Static
			A mod can either have an Update() coroutine, or not.
			This is ideal for mods that only tweak things but not for mods that require realtime interaction with the game.
			If you have an Update coroutine set this to false. If you do not have an Update coroutine, set this to true.
			Static mods will only have their script run once and that's when it's installed.
			This is ideal if your mod only needs to do something like overwrite a function in an NPC's behaviour base.
			However, you must be aware that very few things are actually saved so if you are overwriting something you'll need to overwrite it again on save load.
			Thankfully you can add your own callback function to the OnSaveLoad hook so you can do exactly that.
			In fact, have a look at the DogTeleporter mod that's included with the manager for an example of a static mod that does this.

		Manifest Property: Files
			The game has a file called dir.manifest which contains a path to all files that should be accessible from the ingame Lua state.
			If a file is not in the dir manifest, it cannot be loaded.
			The manager will automatically read the Files list in your modmanifest and add them to the dir manifest automatically when your mod is installed.

		Manifest Property: Version Major/Minor
			These are used to track the versions of the mod. Surprise.
			When you change either version in your modmanifest, the runner will detect this when you load your save and Terminate the old version.
			Read the updating section for updating instructions.

			Currently both version variables are identical in functionality.
				I plan(ned) on using the Major version to indicate compatibility with mods that require your mod.
					E.g. if a mod required Version Major 2 of your mod and Version Major 2 was installed it would be provided (regardless of Version Minor), otherwise it wouldn't be provided to the requesting mod.
				I might implement this later when I implement Mod Modules but I dunno.

		Manifest Property: Other things
			There may be other properties added in the future, so I guess I'll update this file when they're added.

Technical Stuff:
	When the manager is installed, the weaponinventory and GeneralScriptsManager scripts (in gamescripts_r.bnk) are patched to call the startrunner.lua script.
		WeaponInventory is modified to start the runner when starting a new game.
		GeneralScriptManager's LoadSaveTable() is modified to start the manager when loading a saved game. It also triggers the OnSaveLoad hook.

	The runner is the in-game component of the manager. It is a standard lua script that manages the mods coroutines and tables. It resumes enabled mods each tick, triggers hooks, and so forth.
	To communicate with the game/runner, the manager creates a file called installedmods.lua in data/scripts/Mod Manager/.
		This file is read by the runner to see which mods are installed, enabled, disabled, etc.
		It is essentially the only way the manager can "communicate" with the runner.
		The manager writes to this file whenever a change is made, and the runner will read it the next time it checks mod installation status (e.g. on startup).
		In the manager you can see installedmods in memory from the Debug Window and view how each action modifies it.

	